package com.example.websocket.bean;

import java.math.BigDecimal;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * @author
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class Order  implements  Cloneable {
    private String memberId;
    private String currency;
    private String symbol;
    private BigDecimal originalQtyBeforeScale;
    private BigDecimal  qty = BigDecimal.ZERO;
    private BigDecimal price = BigDecimal.ZERO;
    private BigDecimal executedQty = BigDecimal.ZERO; // total executed qty
    private BigDecimal executedPrice = BigDecimal.ZERO;
    private BigDecimal cancelledQty = BigDecimal.ZERO;
    private BigDecimal leavesQty = BigDecimal.ZERO;
    private OrderSide side;
    private OrderType type;
    private MarketExchangeEnum marketExchange;
    private long transactTime;
    private String childOrderId; // our order id, generated by
    private String orderId; //
    private String exchangeOrderId; // the venue gives to us
    private OrderStatus orderStatus;
    private String exchangeAccountId; // keep track of accounts on their venue
    private boolean childOrder; // indicates wether it is a child or not

    // for different symbols in different exchanges, the precision may be different
    private int pricePrecision;
    private int qtyPrecision; // quantity precision
    private OrderReportType reportType;

    private String rejectReason;
    private int rejectCode;

    private BigDecimal lastFilledQty; // total executed qty
    private BigDecimal lastFilledPrice;


    public Order() {

        this.transactTime = System.currentTimeMillis();
    }

    public Order(OrderType type, MarketExchangeEnum market, BigDecimal quantity, BigDecimal price) {
        this.type = type;
        this.marketExchange = market;
        this.qty = quantity;
        this.leavesQty = quantity;
        this.price = price;
        this.orderStatus = OrderStatus.NEW;
        this.transactTime = System.currentTimeMillis();
    }
    

    public Object clone()
    {
        try {
            return (Order) super.clone();
        }
        catch (CloneNotSupportedException ex) {
            ex.printStackTrace();
        }
        return this;
        //Order order  = new Order(this.type, this.marketExchange, this,qty,this,price);
        //order.setOrderId(this.orderId);
    }

    public BigDecimal getOriginalQtyBeforeScale() {
		return originalQtyBeforeScale;
	}

	public void setOriginalQtyBeforeScale(BigDecimal originalQtyBeforeScale) {
		this.originalQtyBeforeScale = originalQtyBeforeScale;
	}

	/**
     *
     */
    public String getMemberId() {
        return memberId;
    }

    public void setMemberId(String memberId) {
        this.memberId = memberId;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }


    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(String symbol) {
        this.symbol = symbol;
    }

    public BigDecimal getQty() {
        return qty;
    }

    public void setQty(BigDecimal qty) {
        this.qty = qty;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public void setPrice(BigDecimal price) {
        this.price = price;
    }

    public OrderSide getSide() {
        return side;
    }

    public void setSide(OrderSide side) {
        this.side = side;
    }

    public OrderType getType() {
        return type;
    }

    public void setType(OrderType type) {
        this.type = type;
    }

    public MarketExchangeEnum getMarketExchange() {
        return marketExchange;
    }

    public void setMarketExchange(MarketExchangeEnum marketExchange) {
        this.marketExchange = marketExchange;
    }

    public long getTransactTime() {
        return transactTime;
    }

    public void setTransactTime(long transactTime) {
        this.transactTime = transactTime;
    }

    public String getChildOrderId() {
        return childOrderId;
    }

    public void setChildOrderId(String childOrderId) {
        this.childOrderId = childOrderId;
    }

    public String getExchangeOrderId() {
        return exchangeOrderId;
    }

    public void setExchangeOrderId(String exchangeOrderId) {
        this.exchangeOrderId = exchangeOrderId;
    }

    public OrderStatus getOrderStatus() {
        return this.orderStatus;
    }

    public void setOrderStatus(OrderStatus orderStatus) {
        this.orderStatus = orderStatus;
    }

    //	public OrderStatus getDerivedOrderStatus() {
    //		if(executedQty.equals(qty))
    //		{
    //			return OrderStatus.FILLED;
    //		} else if(!executedQty.equals(qty)) {
    //			if(cancelledQty!=null && executedPrice!=null) {
    //				return OrderStatus.PARTIALLY_FILLED;
    //			} else {
    //				return OrderStatus.CANCELLED;
    //			}
    //		} else {
    //			return orderStatus;
    //		}
    //	}

    public BigDecimal getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(BigDecimal executedQty) {
        if (executedQty != null) {
            this.executedQty = executedQty;
        } else {
            this.executedQty = BigDecimal.ZERO;
        }
    }

    public BigDecimal getCancelledQty() {
        return cancelledQty;
    }

    public void setCancelledQty(BigDecimal cancelledQty) {
        if (cancelledQty != null) {
            this.cancelledQty = cancelledQty;
        } else {
            this.cancelledQty = BigDecimal.ZERO;
        }
    }

    public BigDecimal getLeavesQty() {
        return leavesQty;
    }

    public void setLeavesQty(BigDecimal leavesQty) {
        if (leavesQty != null) {
            this.leavesQty = leavesQty;
        } else {
            this.leavesQty = BigDecimal.ZERO;
        }
    }

    public boolean isBuyOrder() {
        return this.getSide() == OrderSide.BUY;
    }

    public String getExchangeAccountId() {
        return exchangeAccountId;
    }

    public void setExchangeAccountId(String exchangeAccountId) {
        this.exchangeAccountId = exchangeAccountId;
    }

    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public boolean isChildOrder() {
        return childOrder;
    }

    public void setChildOrder(boolean childOrder) {
        this.childOrder = childOrder;
    }

    public void setPricePrecision(int pricePrecision) {
        this.pricePrecision = pricePrecision;
    }

    public int getPricePrecision() {
        return this.pricePrecision;
    }

    public void setQtyPrecision(int qtyPrecision) {
        this.qtyPrecision = qtyPrecision;
    }

    public int getQtyPrecision() {
        return this.qtyPrecision;
    }


    // Note: This is for child orders only
    public BigDecimal getRemainingQty() {
        return this.leavesQty;
    }

    public boolean isFilled() {
        if (leavesQty != null)
            return leavesQty.compareTo(BigDecimal.ZERO) == 0;
        else
            return false;
    }

    public OrderReportType getReportType() {
        return reportType;
    }

    public void setReportType(OrderReportType reportType) {
        this.reportType = reportType;
    }

    public void update(Order origOrder) {
        this.setCurrency(origOrder.getCurrency());
        this.setSymbol(origOrder.getSymbol());
        this.setQty(origOrder.getQty());
        this.setOriginalQtyBeforeScale(origOrder.getOriginalQtyBeforeScale());
        this.setChildOrderId(origOrder.getChildOrderId());
        this.setSide(origOrder.getSide());
    }


    public String getRejectReason() {
        return rejectReason;
    }

    public void setRejectReason(String rejectReason) {
        this.rejectReason = rejectReason;
    }

    public int getRejectCode() {
        return rejectCode;
    }

    public void setRejectCode(int rejectCode) {
        this.rejectCode = rejectCode;
    }

    public BigDecimal getExecutedPrice() {
        return executedPrice;
    }

    public void setExecutedPrice(BigDecimal executedPrice) {
        this.executedPrice = executedPrice;
    }

    public BigDecimal getLastFilledQty() {
        return lastFilledQty;
    }

    // TODO: This is very critical piece of code. Please be careful when modifying it.
    // It will affect the life cycle of the order
    public void setLastFilledQty(BigDecimal lastFilledQty) {
        if (lastFilledQty == null) {
            lastFilledQty = BigDecimal.ZERO;
        }
        this.lastFilledQty = lastFilledQty;
        this.executedQty = this.executedQty.add(this.lastFilledQty);
        this.leavesQty = this.qty.subtract(this.executedQty).subtract(this.cancelledQty);
    }

    public BigDecimal getLastFilledPrice() {
        return lastFilledPrice;
    }

    public void setLastFilledPrice(BigDecimal lastFilledPrice) {
        this.lastFilledPrice = lastFilledPrice;
    }

    @Override
    public String toString() {
        return "Order{" +
                "memberId='" + memberId + '\'' +
                ", currency='" + currency + '\'' +
                ", symbol='" + symbol + '\'' +
                ", qty=" + qty +
                ", price=" + price +
                ", executedQty=" + executedQty +
                ", executedPrice=" + executedPrice +
                ", cancelledQty=" + cancelledQty +
                ", leavesQty=" + leavesQty +
                ", side=" + side +
                ", type=" + type +
                ", marketExchange=" + marketExchange +
                ", transactTime=" + transactTime +
                ", childOrderId='" + childOrderId + '\'' +
                ", orderId='" + orderId + '\'' +
                ", exchangeOrderId='" + exchangeOrderId + '\'' +
                ", orderStatus=" + orderStatus +
                ", exchangeAccountId='" + exchangeAccountId + '\'' +
                ", childOrder=" + childOrder +
                ", pricePrecision=" + pricePrecision +
                ", qtyPrecision=" + qtyPrecision +
                ", reportType=" + reportType +
                ", rejectReason='" + rejectReason + '\'' +
                ", rejectCode=" + rejectCode +
                ", lastFilledQty=" + lastFilledQty +
                ", lastFilledPrice=" + lastFilledPrice +
                '}';
    }
}
